@use 'sass:map';
@use 'sass:list';
@use '../variables' as vars;

// Name of the next breakpoint, or null for the last breakpoint.
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))
//    md
@function breakpoint-next(
	$name,
	$breakpoints: vars.$breakpoints,
	$breakpoint-names: map.keys($breakpoints)
) {
	$n: list.index($breakpoint-names, $name);
	@if not $n {
		@error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
	}
	@return if(
		$n < length($breakpoint-names),
		nth($breakpoint-names, $n + 1),
		null
	);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    767.98px
@function breakpoint-max($name, $breakpoints: vars.$breakpoints) {
	$max: map.get($breakpoints, $name);
	@return if($max and $max > 0, $max - 0.02, null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.

//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map.get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-down($name, $breakpoints: vars.$breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
		@media (max-width: em($max, 16)) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-up($name, $breakpoints: vars.$breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
		@media (min-width: em($min, 16)) {
			@content;
		}
	} @else {
		@content;
	}
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-only($name, $breakpoints: vars.$breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	$next: breakpoint-next($name, $breakpoints);
	$max: breakpoint-max($next, $breakpoints);

	@if $min != null and $max != null {
		@media (min-width: em($min, 16)) and (max-width: em($max, 16)) {
			@content;
		}
	} @else if $max == null {
		@include media-up($name, $breakpoints) {
			@content;
		}
	} @else if $min == null {
		@include media-down($next, $breakpoints) {
			@content;
		}
	}
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-between($lower, $upper, $breakpoints: vars.$breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);

	@if $min != null and $max != null {
		@media (min-width: em($min, 16)) and (max-width: em($max, 16)) {
			@content;
		}
	} @else if $max == null {
		@include media-up($lower, $breakpoints) {
			@content;
		}
	} @else if $min == null {
		@include media-down($upper, $breakpoints) {
			@content;
		}
	}
}
